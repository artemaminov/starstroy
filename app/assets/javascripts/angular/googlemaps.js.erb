(function () {

  var app = angular.module('starstroy', ['ngMap', 'ngRoute']);

  app.filter('to_trusted', ['$sce', function($sce) {
    return function(text) {
      return $sce.trustAsHtml(text);
    }
  }]);

  app.config(['$routeProvider', '$locationProvider', function ($routeProvider, $locationProvider) {
    $locationProvider.html5Mode(true);
    $routeProvider
        .when('/', {
          templateUrl: '<%= asset_path('angular/templates/blocks_list.html') %>',
          controller: 'blockCtrl',
          resolve: {
            "backBtn": function() {
              return {
                state: function() {
                  return false;
                }
              };
            }
          }
        })
        .when('/blocks/:id', {
          templateUrl: '<%= asset_path('angular/templates/block.html') %>',
          controller: 'blockCtrl',
          resolve: {
            "backBtn": function() {
              return {
                state: function() {
                  return true;
                }
              };
            }
          }
        })
        .when('/coops', {
          templateUrl: '<%= asset_path('angular/templates/coops.html') %>',
          controller: 'coopsCtrl',
          resolve: {
            coops: ['dataProvider', function(dataProvider) {
              return dataProvider.coops.data();
            }]
          }
        })
        .when('/coops/:id', {
          templateUrl: '<%= asset_path('angular/templates/coop.html') %>',
          controller: 'coopsCtrl',
          resolve: {
            coops: ['dataProvider', function(dataProvider) {
              return dataProvider.coops.data();
            }]
          }
        })
        .when('/contacts', {
          templateUrl: '<%= asset_path('angular/templates/contacts.html') %>',
          controller: 'contactsCtrl',
          resolve: {
              company: ['dataProvider', function (dataProvider) {
                return dataProvider.company.data();
              }]
          }
        })
  }]);

  app.factory('mapProvider', ['$http', '$location', 'dataProvider', function ($http, $location, dataProvider) {
    return {
      map: {},
      markers: {
        all: function () {
          return $http.get('blocks.json');
        },
        find: function (id) {
          return $http.get('blocks/' + id + '.json');
        },
        list: {}
      },
      markerState: function (date) {
        var timeFlag = (new Date(date) > Date.now());
        return {
          icon: timeFlag ? '<%= asset_path('map-icn-inprogress.png') %>' : '<%= asset_path('map-icn-ready.png') %>',
          color: timeFlag ? '' : 'green'
        };
      },
      location: function (id) {
        $location.path('/blocks/' + id);
      },
      zoomIn: function (lat, lng, map) {
        this.center(lat, lng, map);
        map.setZoom(16);
      },
      center: function (lat, lng, map) {
        var latlng = new google.maps.LatLng(lat, lng);
//      var browserWidth = window.innerWidth;
//      var offsetX = (browserWidth - 540) / 2 - (browserWidth / 2 - 540);
        map.panToWithOffset(latlng, -270, -50);
      },
      autoCenter: function (markers, map) {
        var limits = new google.maps.LatLngBounds();
        var coords = new google.maps.LatLng(dataProvider.company.coords.lat, dataProvider.company.coords.lng);
        limits.extend(coords);
        for (var i = 0; i < markers.length; i++) {
          coords = new google.maps.LatLng(parseFloat(markers[i].latitude), parseFloat(markers[i].longitude));
          limits.extend(coords);
        }
        map.panToWithOffset(limits.getCenter(), -270, -50);
        map.fitBounds(limits);
      }
    };
  }]);

  app.factory('dataProvider', ['$http', function ($http) {
    return {
      company: {
        data: function() {
          return $http.get('/contacts.json')
        },
        coords: {
          lat: 57.113172,
          lng: 65.569221
        }
      },
      coops: {
        data: function() {
          return $http.get('/coops.json')
        }
      }
    }
  }]);

  app.directive('fancybox', ['$compile', '$http', function($compile, $http) {
    return {
      restrict: 'A',
      controller: ['$scope', function($scope) {
        $scope.openFancybox = function(url) {
          $http.get(url).then(function(response) {
            if (response.status == 200) {
              var template = angular.element(response.data);
              var compiledTemplate = $compile(template);
              compiledTemplate($scope);
              $.fancybox.open({
                content: template,
                type: 'ajax'
              });
            }
          });
        };
      }]
    };
  }]);

  app.directive('caroufredsel', ['$timeout', function($timeout) {
    return {
      restrict: 'A',
      link: function($scope, el, attr) {
        $timeout(function() {
          $(".carousel").carouFredSel({
            circular: true,
            infinite: true,
            responsive: true,
            height: 314,
            width: 500,
            align: 'center',
            items: {
              visible: 1,
              height: 314,
              width: 500,
              minimum: 2
            },
            pagination: {
              container: ".main-carousel-pager",
              anchorBuilder: function(nr) {
                return '<a href="#' + nr + '"></a>'
              }
            },
            auto: {
              timeoutDuration: 6000
            },
            swipe: true
          });
        });
      }
    }
  }]);

  app.controller('mapCtrl', ['$scope', 'mapProvider', function ($scope, mapProvider) {
    mapProvider.markers.all().then(function (response) {
      $scope.markers = response.data;
      $scope.markerState = mapProvider.markerState;
      mapProvider.markers.list = $scope.map.markers;
    });

    $scope.$on('mapInitialized', function (event, map) {
      mapProvider.map = map;
    });

    $scope.showInfo = function(event, id) {
      $scope.marker = $scope.markers[id];
      $scope.showInfoWindow.apply(this, [event, 'info']);
    };

    $scope.location = function(event, id) {
      mapProvider.location(id);
    }
  }]);

  app.controller('navigationCtrl', ['$scope', 'mapProvider', function ($scope, mapProvider) {
    $scope.tabClass = function (current) {
      if ($scope.currentTab == current) return 'current'
    };

    $scope.backBtn = function () {
      $('.carousel').trigger('destroy');
      mapProvider.markers.all().then(function (response) {
        $scope.backBtnState = false;
        mapProvider.autoCenter(response.data, mapProvider.map);
      });
    };

    $scope.planoplanUrl = function(id) {
      $scope.planoplanSrc = '/planoplan/' + id;
    };
  }]);

  app.controller('blockCtrl', ['$scope', 'backBtn', '$location', '$routeParams', '$timeout', 'mapProvider', function ($scope, backBtn, $location, $routeParams, $timeout, mapProvider) {
    $scope.$parent.currentTab = 1;
    $scope.$parent.backBtnState = backBtn.state();

    var promise;
    if (!$routeParams.id) {
      promise = mapProvider.markers.all();
    } else {
      promise = mapProvider.markers.find($routeParams.id);
    }
    promise.then(function (response) {
      $scope.markers = response.data;
      $scope.markerState = mapProvider.markerState;
      if (!$routeParams.id) {
        mapProvider.autoCenter(response.data, mapProvider.map);
      } else {
        mapProvider.zoomIn($scope.markers.latitude, $scope.markers.longitude, mapProvider.map);
      }
    });

    $scope.markerZoom = function (id, lat, lng) {
      $scope.$parent.backBtnState = true;
      mapProvider.zoomIn(lat, lng, mapProvider.map);
      mapProvider.location(id);
    };

    $scope.showInfo = function(id, lat, lng) {
      $timeout(function() {
        mapProvider.center(lat, lng, mapProvider.map);
        google.maps.event.trigger(mapProvider.markers.list[id], 'mouseover');
      })
    };

    $scope.have3d = function(marker) {
      if (marker) {
        return marker.three_d_templates.length > 0;
      }
    };

    $scope.havePlan = function(marker) {
      if (marker) {
        return !!marker.scheme;
      }
    };
  }]);

  app.controller('coopsCtrl', ['$scope', 'mapProvider', 'coops', function($scope, mapProvider, coops) {
    $scope.$parent.currentTab = 2;

    mapProvider.markers.all().then(function(response) {
      mapProvider.autoCenter(response.data, mapProvider.map);
    });

    $scope.coops = coops.data;
  }]);

  app.controller('contactsCtrl', ['$scope', 'mapProvider', 'dataProvider', 'company', function($scope, mapProvider, dataProvider, company) {
    $scope.$parent.currentTab = 3;
    mapProvider.zoomIn(dataProvider.company.coords.lat, dataProvider.company.coords.lng, mapProvider.map);
    $scope.company = company.data;

    $scope.haveFiles = function(company) {
      if (company) {
        return company.files.length > 0
      }
    }
  }]);

})();

google.maps.Map.prototype.panToWithOffset = function(latlng, offsetX, offsetY) {
  var map = this;
  var overlayView = new google.maps.OverlayView();
  overlayView.onAdd = function() {
    var projection = this.getProjection();
    var containerCoords = projection.fromLatLngToContainerPixel(latlng);
    containerCoords.x = containerCoords.x + offsetX;
    containerCoords.y = containerCoords.y + offsetY;
    map.panTo(projection.fromContainerPixelToLatLng(containerCoords));
  };
  overlayView.draw = function() {};
  overlayView.setMap(this);
};
